<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>达芬奇的乌龙茶</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-16T05:57:14.186Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端自动化测试的挑战</title>
    <link href="http://example.com/2023/03/16/fe-auto-testing/"/>
    <id>http://example.com/2023/03/16/fe-auto-testing/</id>
    <published>2023-03-16T06:48:17.000Z</published>
    <updated>2023-03-16T05:57:14.186Z</updated>
    
    <content type="html"><![CDATA[<p>前端界面自动化测试是一种通过模拟用户操作来验证前端功能和界面的测试方法。它可以提高测试效率，减少人工干预，提升软件质量。但是，前端界面自动化测试也面临着一些挑战，比如：</p><ul><li>前端界面变更频繁，导致测试用例失效或难以维护</li><li>前端界面涉及多种元素和交互，导致测试用例复杂或不稳定</li><li>前端界面需要适配多种浏览器和设备，导致测试用例覆盖不全或执行缓慢</li></ul><p>针对这些挑战，有以下一些建议：</p><ul><li>选择合适的自动化测试框架。根据网上的搜索结果，前端自动化的流派主要分为三类：基于录制回放技术的自动化测试框架，基于对文档对象模型 (DOM）对象进行解析的自动化测试框架，以及基于图像识别的自动化测试框架。每种框架都有其优缺点和适用场景，需要根据项目的特点和需求进行选择。</li><li>优先进行单元测试和服务测试。根据网上的搜索结果，前端项目通常UI变化频繁，一旦发生变化，UI测试用例就无法执行且难以维护，所以UI自动化测试的成本高，收益小；相比UI测试，Service测试更加简单直接且变化不会很频繁；单元测试主要对公共函数、方法进行测试，测试用例复用度高且更能保证代码质量。因此，在进行前端自动化测试时，应该优先考虑单元测试和服务测试，并尽量覆盖所有可能出现的情况。</li><li>使用云测平台或容器技术。根据网上的搜索结果，为了解决前端界面需要适配多种浏览器和设备的问题，可以使用云测平台或容器技术来提供多样化的环境和资源，并实现并行执行、实时监控、远程调试等功能。这样可以节省本地资源、提高执行速度、增强可靠性。</li></ul><p>那么如何编写高质量的前端自动化测试用例呢？</p><p>编写高质量的前端自动化用例是一项重要的技能，它可以帮助你更有效地验证前端功能和界面，发现并修复缺陷，提升软件质量。根据网上的搜索结果。<br>以下是一些编写高质量的前端自动化用例的原则和规范：</p><ul><li>针对稳定且重要的业务基础代码编写测试用例，比如通用组件、通用算法和数据模块等，避免频繁变更的UI元素和交互。</li><li>遵循测试用例编写的统一格式，包括测试编号、测试标题、测试目标、测试步骤、预期结果、实际结果等，并使用清晰明确的语言描述。</li><li>设计合理且完备的测试数据，覆盖正常情况和异常情况，并尽量使用真实或接近真实的数据。</li><li>采用模块化和参数化的方式编写测试用例，提高复用性和可维护性，并避免硬编码和冗余代码。</li><li>使用断言或检查点来验证预期结果是否与实际结果一致，并在出现错误时及时报告并记录日志。</li><li>定期执行回归测试，并根据产品需求或代码变更及时更新或删除无效或过时的测试用例。</li></ul><p>引用：</p><ul><li>如何进行前端自动化测试？ - 知乎. <a href="https://www.zhihu.com/question/29922082">https://www.zhihu.com/question/29922082</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>测试用例编写规范 - 知乎. <a href="https://zhuanlan.zhihu.com/p/144846636">https://zhuanlan.zhihu.com/p/144846636</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>字节测试总监，让我们用这份《测试用例规范》，再也没加班过 - 掘金. <a href="https://juejin.cn/post/7210299613974020154">https://juejin.cn/post/7210299613974020154</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>种前端自动化测试框架，到底谁是No.1 - 知乎. <a href="https://zhuanlan.zhihu.com/p/468599846">https://zhuanlan.zhihu.com/p/468599846</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>前端自动化测试详解 - 知乎. <a href="https://zhuanlan.zhihu.com/p/84405914">https://zhuanlan.zhihu.com/p/84405914</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>如何进行前端自动化测试？ - 知乎. <a href="https://www.zhihu.com/question/29922082">https://www.zhihu.com/question/29922082</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>一文搞定前端自动化测试（Vue 实战） - 掘金. <a href="https://juejin.cn/post/6973227219074154503">https://juejin.cn/post/6973227219074154503</a> 访问时间 2023&#x2F;3&#x2F;16.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前端界面自动化测试是一种通过模拟用户操作来验证前端功能和界面的测试方法。它可以提高测试效率，减少人工干预，提升软件质量。但是，前端界面自动化测试也面临着一些挑战，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端界面变更频繁，导致测试用例失效或难以维护&lt;/li&gt;
&lt;li&gt;前端界面涉及多</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Node.js 浅析</title>
    <link href="http://example.com/2023/03/10/nodejs-brief/"/>
    <id>http://example.com/2023/03/10/nodejs-brief/</id>
    <published>2023-03-10T06:48:17.000Z</published>
    <updated>2023-03-10T09:23:02.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Node-js"><a href="#什么是-Node-js" class="headerlink" title="什么是 Node.js"></a>什么是 Node.js</h2><p>官方定义 Node.js 是一个开源的，跨平台的 Javascript 运行时环境。</p><p>要理解这个定义需要从 Javascript 的前身谈起。在 2009 年 Node.js 出现之前，Javascript 只能运行在浏览器中，作为网页脚本使用。而 Node.js 的出现，使 Javascript 可以象其它编程语言一样运行在计算机上，Node.js 之于 Javascript 可以类比 JRE 之于 Java。所以 Node.js 不是一个编程语言，也不是一个 Javascript 框架，它是一整套 Javascript 的运行时环境（Runtime）。</p><p>由于 Node.js 的出现，使 Javascript 彻底摆脱浏览器成为一门独立的编程语言。和其它编程语言 Python, Java, Rube 等一样，除了本身擅长前端开发以外，Javascript 也可以开发后台、GUI程序、CLI命令行工具等等。Javascript 有庞大开发者基础，所以 Node.js 的出现使基于 Javascript 的技术栈直接井喷。</p><p>Node.js 的安装使用可以参考：<a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">Node.js Tutorial</a></p><h2 id="Node-js-的特点"><a href="#Node-js-的特点" class="headerlink" title="Node.js 的特点"></a>Node.js 的特点</h2><p>Node.js 本身的核心模块包括文件系统I&#x2F;O、网络（HTTP、TCP、UDP、DNS、TLS&#x2F;SSL等）、二进制数据流、加密算法、数据流等等。Node.js 模块的 API 形式简单，降低了编程的复杂度。</p><p>Node.js 的最大特点在于它基于高性能的 Chrome V8 引擎，提供了一个单线程 NIO (非阻塞队列) 的事件驱动模型。这使它极其高效和轻量级。</p><p><img src="/images/node/nodejs-nio.webp"></p><p>如上图所示，Node.js 的核心是一个事件驱动的单线程非阻塞 Event Loop 用来处理所有的请求（由于是单线程，所以不需要锁，避免了多线程带来的复杂性和开销），这样的设计让 Node.js 非常擅于 IO 密集型的应用，能够充分用效的利用硬件资源，从而提供更高的并发性能。</p><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>引用：<a href="https://medium.com/deno-the-complete-reference/node-js-vs-springboot-hello-world-performance-comparison-59b4d461526c">Node.js vs Springboot: Hello world performance comparison</a></p><p>传统 Spring Boot 和 Node.js 的性能对比。<br><strong>需要说明的是这并不是一个严谨的比较，因为基于 Java 语言也有很多优秀的 NIO 模型框架，比如 Netty、以及基于 Netty 的 spring5-webflux，其提供了恐怖的并发性能。所以这个比较只是一个示例，用于说明 Node.js 在特定场景下的的优势，仅供参考。勿喷。</strong></p><p><img src="/images/node/performance.requests.webp"><br><img src="/images/node/performance.cpu.webp"><br><img src="/images/node/performance.memory.webp"></p><h2 id="Node-js-的适用场景"><a href="#Node-js-的适用场景" class="headerlink" title="Node.js 的适用场景"></a>Node.js 的适用场景</h2><p>迄今为止 Node.js 发展出了一个庞大且完善的生态系统，提供了各种各样的第三方模块和工具，例如 Express、Koa、Nest 以及数不清的 Javascript Library。但传统的语言比如 Java 在生态方面一样非常强大。</p><p>从业务角度来讲 Node.js 的最大优点是易上手、开发简单速度快，Javascript 的语言特性可以让开发者以极快的速度响应不断变化的业务场景，前后端可以用同一种语言实现代码复用。另外生态强大就意味着轮子多，文档完善，有什么需求找合适的轮子直接用，提高生产效率。所以 Node.js 在开发轻量级、快速迭代、实时交互等类型的 Web 应用程序方面是有优势的。</p><p>从技术角度来讲，轻量、快速、实时的网络应用程序，例如聊天、游戏、社交等领域是 Node.js 的强项。</p><p>从资源占用方面来讲，Node.js 通常可以让你用更少的代价去高效的利用资源（CPU、Memory…），以支撑更高的访问量。</p><p>相反的，重量级、稳定可靠、安全保密等类型的 Web 应用程序，可能并不适合用 Node.js 来进行开发。但 Node.js 的社区也在不断发展，需要持续关注 Node.js 带来的可能性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-Node-js&quot;&gt;&lt;a href=&quot;#什么是-Node-js&quot; class=&quot;headerlink&quot; title=&quot;什么是 Node.js&quot;&gt;&lt;/a&gt;什么是 Node.js&lt;/h2&gt;&lt;p&gt;官方定义 Node.js 是一个开源的，跨平台的 Javascrip</summary>
      
    
    
    
    
  </entry>
  
</feed>
