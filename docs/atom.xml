<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>达芬奇的乌龙茶</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-16T09:15:53.745Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Hooks</title>
    <link href="http://example.com/2023/03/16/react-hooks/"/>
    <id>http://example.com/2023/03/16/react-hooks/</id>
    <published>2023-03-16T08:45:17.000Z</published>
    <updated>2023-03-16T09:15:53.745Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>Reactjs是一个用于构建用户界面的JavaScript库，它提供了一种称为Hooks的特性，让你可以在函数组件中使用状态和其他React特性，而不需要写类组件。</p><h2 id="Reactjs提供了以下几种Hooks"><a href="#Reactjs提供了以下几种Hooks" class="headerlink" title="Reactjs提供了以下几种Hooks"></a>Reactjs提供了以下几种Hooks</h2><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a><code>useState</code></h3><ul><li><code>useState</code>: 用于在函数组件中添加状态。它返回一个状态变量和一个更新该变量的函数。你可以在组件中多次使用<code>useState</code>来定义多个状态变量。</li></ul><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a><code>useEffect</code></h3><ul><li><code>useEffect</code>: 用于在函数组件中执行副作用，如数据获取、订阅、定时器等。它接受一个函数作为参数，该函数会在每次渲染后执行。你可以在组件中多次使用<code>useEffect</code>来定义多个副作用。</li></ul><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a><code>useContext</code></h3><ul><li><code>useContext</code>：用于在函数组件中访问React的上下文。它接受一个上下文对象作为参数，并返回该上下文的当前值。你可以使用<code>useContext</code>来避免通过多层组件传递props。</li></ul><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a><code>useReducer</code></h3><ul><li><code>useReducer</code>：用于在函数组件中管理复杂的状态逻辑。它接受一个reducer函数和一个初始状态作为参数，并返回一个当前状态和一个分发action的函数。你可以使用<code>useReducer</code>来替代<code>useState</code>，当你的状态逻辑包含多个子值或者依赖于之前的状态时。</li></ul><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a><code>useCallback</code></h3><ul><li><code>useCallback</code>：用于在函数组件中缓存函数。它接受一个内联函数和一个依赖数组作为参数，并返回该函数的缓存版本。你可以使用<code>useCallback</code>来避免不必要的重新渲染，当你把函数作为props传递给子组件时。</li></ul><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a><code>useMemo</code></h3><ul><li><code>useMemo</code>：用于在函数组件中缓存计算结果。它接受一个创建值的函数和一个依赖数组作为参数，并返回该值的缓存版本。你可以使用<code>useMemo</code>来避免重复计算，当你的计算结果依赖于一些变化较少的值时。</li></ul><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a><code>useRef</code></h3><ul><li><code>useRef</code>: 用于在函数组件中创建可变的引用对象。它接受一个初始值作为参数，并返回一个包含当前值属性（<code>.current</code>) 的对象。你可以使用<br><code>useRef</code><br>来保存任何可变值，而不会触发重新渲染，例如DOM元素、定时器ID等。</li></ul><h3 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a><code>useImperativeHandle</code></h3><ul><li><code>useImperativeHandle</code>: 用于在自定义Hook中自定义暴露给父组件的ref对象。它接受一个ref对象和一个创建ref对象当前值属性（<code>.current</code>) 的回调函数作为参数，并将回调函数返回<br>的结果分配给ref对象当前值属性（<code>.current</code>) 。你可以使用<br><code>useImperativeHandle</code><br>来控制父组件通过ref访问子组件实例时能够访问到什么内容。</li></ul><h3 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a><code>useLayoutEffect</code></h3><ul><li><code>useLayoutEffect</code>: 与<br><code>useEffect</code><br>类似，但是会在所有DOM更改之后同步执行副作用回调，在浏览器绘制之前执行回调，在大多数情况下应该优先使用<br><code>useEffect</code><br>，除非需要从DOM读取布局并同步触发更新，在这种情况下应该使用<br><code>useLayoutEffect</code></li></ul><h3 id="useDebugValue"><a href="#useDebugValue" class="headerlink" title="useDebugValue"></a><code>useDebugValue</code></h3><ul><li><code>useDebugValue</code>: 可以被自定义Hook开发者使用，在 React DevTools 中显示自定义hook标签。</li></ul><p>好的，我可以给你一些使用Hooks的示例代码，但是请注意，这些代码只是为了演示Hooks的用法，并不一定代表最佳实践。如果你想要更深入地学习Hooks，请参考React官方文档¹²或者其他可靠的资源。</p><h2 id="以下是一些使用Hooks的示例代码"><a href="#以下是一些使用Hooks的示例代码" class="headerlink" title="以下是一些使用Hooks的示例代码"></a>以下是一些使用Hooks的示例代码</h2><h3 id="useState-1"><a href="#useState-1" class="headerlink" title="useState"></a><code>useState</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 定义一个名为count的状态变量，初始值为0</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个函数，用于增加count的值</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个函数，用于减少count的值</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个JSX元素，显示count的值和两个按钮</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前计数：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;decrement&#125;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useEffect-1"><a href="#useEffect-1" class="headerlink" title="useEffect"></a><code>useEffect</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Clock</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 定义一个名为time的状态变量，初始值为当前时间</span></span><br><span class="line">  <span class="keyword">const</span> [time, setTime] = <span class="title function_">useState</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用useEffect定义一个副作用，每隔一秒更新time的值</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个定时器ID</span></span><br><span class="line">    <span class="keyword">const</span> timerID = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setTime</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个清理函数，在组件卸载时取消定时器</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timerID);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []); <span class="comment">// 空数组表示只在组件挂载时执行一次</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个JSX元素，显示当前时间</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>现在是：&#123;time.toLocaleTimeString()&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useReducer-1"><a href="#useReducer-1" class="headerlink" title="useReducer"></a><code>useReducer</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个reducer函数，根据action的类型更新state</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 使用useReducer定义一个名为state的状态变量和一个名为dispatch的函数，初始值为&#123;count:0&#125;</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个JSX元素，显示state.count的值和两个按钮</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前计数：&#123;state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的，我可以再给你一些useCallback和useContext的示例代码，但是请注意，这些代码只是为了演示Hooks的用法，并不一定代表最佳实践。如果你想要更深入地学习Hooks，请参考React官方文档¹²³或者其他可靠的资源。</p><p>以下是一些useCallback和useContext的示例代码：</p><h3 id="useCallback-1"><a href="#useCallback-1" class="headerlink" title="useCallback"></a><code>useCallback</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123; increment &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 返回一个JSX元素，显示一个按钮</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increment&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 定义一个名为count的状态变量，初始值为0</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用useCallback定义一个函数，用于增加count的值，并将count作为依赖项</span></span><br><span class="line">  <span class="keyword">const</span> increment = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个JSX元素，显示count的值和Child组件</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前计数：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">increment</span>=<span class="string">&#123;increment&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useContext-1"><a href="#useContext-1" class="headerlink" title="useContext"></a><code>useContext</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个名为ThemeContext的上下文对象，并设置默认值为light</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="string">&quot;light&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 定义一个名为theme的状态变量，初始值为dark</span></span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&quot;dark&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个函数，用于切换theme的值</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toggleTheme</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setTheme</span>(<span class="function">(<span class="params">prevTheme</span>) =&gt;</span> (prevTheme === <span class="string">&quot;dark&quot;</span> ? <span class="string">&quot;light&quot;</span> : <span class="string">&quot;dark&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个JSX元素，使用ThemeContext.Provider包裹子组件，并传递theme作为value属性</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前主题：&#123;theme&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleTheme&#125;</span>&gt;</span>切换主题<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Toolbar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Toolbar</span>(<span class="params"></span>) &#123;</span><br></pre></td></tr></table></figure><ul><li>useContext • React. <a href="https://beta.reactjs.org/reference/react/useContext">https://beta.reactjs.org/reference/react/useContext</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>React useContext Hook Tutorial (with Examples) - Dave Ceddia. <a href="https://daveceddia.com/usecontext-hook/">https://daveceddia.com/usecontext-hook/</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>React useContext Hook - W3Schools. <a href="https://www.w3schools.com/react/react_usecontext.asp">https://www.w3schools.com/react/react_usecontext.asp</a> 访问时间 2023&#x2F;3&#x2F;16.<br>源: 与必应的对话， 2023&#x2F;3&#x2F;16(1) Hooks API Reference – React. <a href="https://reactjs.org/docs/hooks-reference.html">https://reactjs.org/docs/hooks-reference.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>useContext • React. <a href="https://beta.reactjs.org/reference/react/useContext">https://beta.reactjs.org/reference/react/useContext</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>useCallback • React. <a href="https://beta.reactjs.org/reference/react/useCallback">https://beta.reactjs.org/reference/react/useCallback</a> 访问时间 2023&#x2F;3&#x2F;16.<br>源: 与必应的对话， 2023&#x2F;3&#x2F;16(1) Introducing Hooks – React. <a href="https://reactjs.org/docs/hooks-intro.html">https://reactjs.org/docs/hooks-intro.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>Hooks at a Glance – React. <a href="https://reactjs.org/docs/hooks-overview.html">https://reactjs.org/docs/hooks-overview.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>Using the State Hook – React. <a href="https://reactjs.org/docs/hooks-state.html">https://reactjs.org/docs/hooks-state.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>Introducing Hooks – React. <a href="https://reactjs.org/docs/hooks-intro.html">https://reactjs.org/docs/hooks-intro.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>Hooks at a Glance – React. <a href="https://reactjs.org/docs/hooks-overview.html">https://reactjs.org/docs/hooks-overview.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>11 Useful Custom React Hooks for Your Next Web App. <a href="https://blog.bitsrc.io/11-useful-custom-react-hooks-for-your-next-app-c66307cf0f0c">https://blog.bitsrc.io/11-useful-custom-react-hooks-for-your-next-app-c66307cf0f0c</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>Un vistazo a los Hooks – React. <a href="https://es.reactjs.org/docs/hooks-overview.html">https://es.reactjs.org/docs/hooks-overview.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>Presentando Hooks – React. <a href="https://es.reactjs.org/docs/hooks-intro.html">https://es.reactjs.org/docs/hooks-intro.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>Introducing Hooks – React. <a href="https://reactjs.org/docs/hooks-intro.html">https://reactjs.org/docs/hooks-intro.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>React Hooks - W3Schools. <a href="https://www.w3schools.com/react/react_hooks.asp">https://www.w3schools.com/react/react_hooks.asp</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>Hooks API Reference – React. <a href="https://reactjs.org/docs/hooks-reference.html">https://reactjs.org/docs/hooks-reference.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;Reactjs是一个用于构建用户界面的JavaScript库，它提供了一种称为Hooks的特性，让你可以在函数组件中使用状态和其他React特性，而不需要写类组件。&lt;/p&gt;
&lt;h2 id=&quot;Reactjs提供了以下几种Hooks&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端自动化测试的挑战和应对</title>
    <link href="http://example.com/2023/03/16/fe-auto-testing/"/>
    <id>http://example.com/2023/03/16/fe-auto-testing/</id>
    <published>2023-03-16T06:48:17.000Z</published>
    <updated>2023-03-17T02:40:27.534Z</updated>
    
    <content type="html"><![CDATA[<p>前端界面自动化测试是一种通过模拟用户操作来验证前端功能和界面的测试方法。它可以提高测试效率，减少人工干预，提升软件质量。但是，前端界面自动化测试也面临着一些挑战，比如：</p><ul><li>前端界面变更频繁，导致测试用例失效或难以维护</li><li>前端界面涉及多种元素和交互，导致测试用例复杂或不稳定</li><li>前端界面需要适配多种浏览器和设备，导致测试用例覆盖不全或执行缓慢</li></ul><p>针对这些挑战，有以下一些建议：</p><ul><li>选择合适的自动化测试框架。前端自动化的流派主要分为三类：基于录制回放技术的自动化测试框架，基于对文档对象模型 (DOM）对象进行解析的自动化测试框架，以及基于图像识别的自动化测试框架。每种框架都有其优缺点和适用场景，需要根据项目的特点和需求进行选择。</li><li>优先进行单元测试和服务测试。前端项目通常UI变化频繁，一旦发生变化，UI测试用例就无法执行且难以维护，所以UI自动化测试的成本高，收益小；相比UI测试，Service测试更加简单直接且变化不会很频繁；单元测试主要对公共函数、方法进行测试，测试用例复用度高且更能保证代码质量。因此，在进行前端自动化测试时，应该优先考虑单元测试和服务测试，并尽量覆盖所有可能出现的情况。</li><li>使用云测平台或容器技术。为了解决前端界面需要适配多种浏览器和设备的问题，可以使用云测平台或容器技术来提供多样化的环境和资源，并实现并行执行、实时监控、远程调试等功能。这样可以节省本地资源、提高执行速度、增强可靠性。</li></ul><p>那么如何编写高质量的前端自动化测试用例呢？</p><p>编写高质量的前端自动化用例是一项重要的技能，它可以帮助你更有效地验证前端功能和界面，发现并修复缺陷，提升软件质量。根据网上的搜索结果。<br>以下是一些编写高质量的前端自动化用例的原则和规范：</p><ul><li>针对稳定且重要的业务基础代码编写测试用例，比如通用组件、通用算法和数据模块等，避免频繁变更的UI元素和交互。</li><li>遵循测试用例编写的统一格式，包括测试编号、测试标题、测试目标、测试步骤、预期结果、实际结果等，并使用清晰明确的语言描述。</li><li>设计合理且完备的测试数据，覆盖正常情况和异常情况，并尽量使用真实或接近真实的数据。</li><li>采用模块化和参数化的方式编写测试用例，提高复用性和可维护性，并避免硬编码和冗余代码。</li><li>使用断言或检查点来验证预期结果是否与实际结果一致，并在出现错误时及时报告并记录日志。</li><li>定期执行回归测试，并根据产品需求或代码变更及时更新或删除无效或过时的测试用例。</li></ul><p>自动化测试工具：</p><p>前端自动化测试工具有很多种，根据网上的搜索结果，我为你总结了以下一些常用的前端自动化测试工具：</p><ul><li>Karma：一个测试运行平台，可以在多个真实浏览器中运行测试用例，并提供实时反馈。它可以集成多种测试框架（如Jasmine、Mocha等）和断言库（如Chai、Sinon等），并支持代码覆盖率报告和持续集成。</li><li>Jest：一个基于Jasmine的JavaScript测试框架，可以对React、Vue等前端框架进行单元测试和快照测试。它内置了断言库、模拟库、代码覆盖率工具等功能，并提供了简洁的API和快速的执行速度。</li><li>Selenium：一个用于Web应用程序自动化测试的工具，可以模拟用户在浏览器中的操作，并验证预期结果。它支持多种编程语言（如Java、Python、Ruby等）和浏览器（如Chrome、Firefox、IE等），并提供了WebDriver API和IDE插件。</li><li>Cypress：一个全新的前端自动化测试框架，可以对Web应用程序进行端到端的集成测试。它不需要依赖Selenium或其他外部服务，而是直接运行在浏览器中，并提供了丰富的API和图形界面。</li></ul><p>引用：</p><ul><li>常用的前端自动化测试工具介绍 —— Karma_前端江太公的博客-CSDN博客_前端自动化测试工具. <a href="https://blog.csdn.net/ZiChen_Jiang/article/details/122130962">https://blog.csdn.net/ZiChen_Jiang/article/details/122130962</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>前端自动化测试jest - 冷风风 - 博客园. <a href="https://www.cnblogs.com/miangao/p/17219585.html">https://www.cnblogs.com/miangao/p/17219585.html</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>web 前端的自动化测试工具都有哪些？ - 知乎. <a href="https://www.zhihu.com/question/483900495">https://www.zhihu.com/question/483900495</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>前端自动化测试框架cypress - 掘金. <a href="https://juejin.cn/post/7051405917832609828">https://juejin.cn/post/7051405917832609828</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>前端自动化测试-Jest 快速入门 - 掘金. <a href="https://juejin.cn/post/6974673792748486693">https://juejin.cn/post/6974673792748486693</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>如何进行前端自动化测试？ - 知乎. <a href="https://www.zhihu.com/question/29922082">https://www.zhihu.com/question/29922082</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>测试用例编写规范 - 知乎. <a href="https://zhuanlan.zhihu.com/p/144846636">https://zhuanlan.zhihu.com/p/144846636</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>字节测试总监，让我们用这份《测试用例规范》，再也没加班过 - 掘金. <a href="https://juejin.cn/post/7210299613974020154">https://juejin.cn/post/7210299613974020154</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>种前端自动化测试框架，到底谁是No.1 - 知乎. <a href="https://zhuanlan.zhihu.com/p/468599846">https://zhuanlan.zhihu.com/p/468599846</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>前端自动化测试详解 - 知乎. <a href="https://zhuanlan.zhihu.com/p/84405914">https://zhuanlan.zhihu.com/p/84405914</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>如何进行前端自动化测试？ - 知乎. <a href="https://www.zhihu.com/question/29922082">https://www.zhihu.com/question/29922082</a> 访问时间 2023&#x2F;3&#x2F;16.</li><li>一文搞定前端自动化测试（Vue 实战） - 掘金. <a href="https://juejin.cn/post/6973227219074154503">https://juejin.cn/post/6973227219074154503</a> 访问时间 2023&#x2F;3&#x2F;16.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前端界面自动化测试是一种通过模拟用户操作来验证前端功能和界面的测试方法。它可以提高测试效率，减少人工干预，提升软件质量。但是，前端界面自动化测试也面临着一些挑战，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端界面变更频繁，导致测试用例失效或难以维护&lt;/li&gt;
&lt;li&gt;前端界面涉及多</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Node.js 浅析</title>
    <link href="http://example.com/2023/03/10/nodejs-brief/"/>
    <id>http://example.com/2023/03/10/nodejs-brief/</id>
    <published>2023-03-10T06:48:17.000Z</published>
    <updated>2023-03-10T09:23:02.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Node-js"><a href="#什么是-Node-js" class="headerlink" title="什么是 Node.js"></a>什么是 Node.js</h2><p>官方定义 Node.js 是一个开源的，跨平台的 Javascript 运行时环境。</p><p>要理解这个定义需要从 Javascript 的前身谈起。在 2009 年 Node.js 出现之前，Javascript 只能运行在浏览器中，作为网页脚本使用。而 Node.js 的出现，使 Javascript 可以象其它编程语言一样运行在计算机上，Node.js 之于 Javascript 可以类比 JRE 之于 Java。所以 Node.js 不是一个编程语言，也不是一个 Javascript 框架，它是一整套 Javascript 的运行时环境（Runtime）。</p><p>由于 Node.js 的出现，使 Javascript 彻底摆脱浏览器成为一门独立的编程语言。和其它编程语言 Python, Java, Rube 等一样，除了本身擅长前端开发以外，Javascript 也可以开发后台、GUI程序、CLI命令行工具等等。Javascript 有庞大开发者基础，所以 Node.js 的出现使基于 Javascript 的技术栈直接井喷。</p><p>Node.js 的安装使用可以参考：<a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">Node.js Tutorial</a></p><h2 id="Node-js-的特点"><a href="#Node-js-的特点" class="headerlink" title="Node.js 的特点"></a>Node.js 的特点</h2><p>Node.js 本身的核心模块包括文件系统I&#x2F;O、网络（HTTP、TCP、UDP、DNS、TLS&#x2F;SSL等）、二进制数据流、加密算法、数据流等等。Node.js 模块的 API 形式简单，降低了编程的复杂度。</p><p>Node.js 的最大特点在于它基于高性能的 Chrome V8 引擎，提供了一个单线程 NIO (非阻塞队列) 的事件驱动模型。这使它极其高效和轻量级。</p><p><img src="/images/node/nodejs-nio.webp"></p><p>如上图所示，Node.js 的核心是一个事件驱动的单线程非阻塞 Event Loop 用来处理所有的请求（由于是单线程，所以不需要锁，避免了多线程带来的复杂性和开销），这样的设计让 Node.js 非常擅于 IO 密集型的应用，能够充分用效的利用硬件资源，从而提供更高的并发性能。</p><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>引用：<a href="https://medium.com/deno-the-complete-reference/node-js-vs-springboot-hello-world-performance-comparison-59b4d461526c">Node.js vs Springboot: Hello world performance comparison</a></p><p>传统 Spring Boot 和 Node.js 的性能对比。<br><strong>需要说明的是这并不是一个严谨的比较，因为基于 Java 语言也有很多优秀的 NIO 模型框架，比如 Netty、以及基于 Netty 的 spring5-webflux，其提供了恐怖的并发性能。所以这个比较只是一个示例，用于说明 Node.js 在特定场景下的的优势，仅供参考。勿喷。</strong></p><p><img src="/images/node/performance.requests.webp"><br><img src="/images/node/performance.cpu.webp"><br><img src="/images/node/performance.memory.webp"></p><h2 id="Node-js-的适用场景"><a href="#Node-js-的适用场景" class="headerlink" title="Node.js 的适用场景"></a>Node.js 的适用场景</h2><p>迄今为止 Node.js 发展出了一个庞大且完善的生态系统，提供了各种各样的第三方模块和工具，例如 Express、Koa、Nest 以及数不清的 Javascript Library。但传统的语言比如 Java 在生态方面一样非常强大。</p><p>从业务角度来讲 Node.js 的最大优点是易上手、开发简单速度快，Javascript 的语言特性可以让开发者以极快的速度响应不断变化的业务场景，前后端可以用同一种语言实现代码复用。另外生态强大就意味着轮子多，文档完善，有什么需求找合适的轮子直接用，提高生产效率。所以 Node.js 在开发轻量级、快速迭代、实时交互等类型的 Web 应用程序方面是有优势的。</p><p>从技术角度来讲，轻量、快速、实时的网络应用程序，例如聊天、游戏、社交等领域是 Node.js 的强项。</p><p>从资源占用方面来讲，Node.js 通常可以让你用更少的代价去高效的利用资源（CPU、Memory…），以支撑更高的访问量。</p><p>相反的，重量级、稳定可靠、安全保密等类型的 Web 应用程序，可能并不适合用 Node.js 来进行开发。但 Node.js 的社区也在不断发展，需要持续关注 Node.js 带来的可能性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-Node-js&quot;&gt;&lt;a href=&quot;#什么是-Node-js&quot; class=&quot;headerlink&quot; title=&quot;什么是 Node.js&quot;&gt;&lt;/a&gt;什么是 Node.js&lt;/h2&gt;&lt;p&gt;官方定义 Node.js 是一个开源的，跨平台的 Javascrip</summary>
      
    
    
    
    
  </entry>
  
</feed>
